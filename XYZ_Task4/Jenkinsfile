pipeline {
    agent {
        label 'agent193'
    }

    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = "xyztechnologies"
        DOCKER_HUB = "demsdocker"
        APP_PORT = "8080"           
        HOST_PORT = "8081"       
        TOMCAT_APP_PATH = "XYZtechnologies-1.0" 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            tools {
                maven 'maven'
            }
            steps {
                sh 'mvn clean install -Dmaven.test.skip=true'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    sh "docker tag ${DOCKER_IMAGE} ${DOCKER_HUB}/${DOCKER_IMAGE}"
                    sh "docker push ${DOCKER_HUB}/${DOCKER_IMAGE}"
                }
                echo "Successfully built and uploaded to DockerHub"
            }
        }

        stage('Run Docker container locally') {
            steps {
                sh 'ansible-playbook XYZ_Task3/ansible/ansibleDocCont.yml --connection=local'
                echo "Successfully pulled from DockerHub and started container locally"
            }
        }

        stage('Post-deploy: Check App Deployment in Tomcat') {
            steps {
                script {
                    echo "Waiting for Tomcat to start..."
                    sleep 10

                    echo "Checking deployed app in Tomcat..."
                    sh '''
                        status_code=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:${HOST_PORT}/${TOMCAT_APP_PATH}/)
                        if [ "$status_code" != "200" ]; then
                            echo "❌ Application not available at http://localhost:${HOST_PORT}/${TOMCAT_APP_PATH}/"
                            exit 1
                        else
                            echo "✅ Application successfully deployed to Tomcat at http://localhost:${HOST_PORT}/${TOMCAT_APP_PATH}/"
                        fi
                    '''
                }
            }
        }

       
        stage('Deploy to Kubernetes') {
             steps {
                withKubeConfig([credentialsId: 'certificate_file']) {
                    sh 'kubectl get nodes'
                    sh 'kubectl create namespace xyz-tech --dry-run=client -o yaml | kubectl apply -f -'
                    sh 'kubectl create namespace metallb-system --dry-run=client -o yaml | kubectl apply -f -'
                    sh 'kubectl apply -f k8s/rbac.yml'
                    sh 'kubectl apply -f k8s/deployment.yml'
                    sh 'kubectl apply -f k8s/service.yml'

                    // ❗ FIXED LINE
                    sh 'kubectl rollout status deployment/xyz-tech-deployment -n xyz-tech --timeout=900s'
                }
            }
        }
        stage('Check Deployed App') {
            steps {
                withKubeConfig([credentialsId: 'certificate_file']) {
                    sh 'kubectl get pods -n xyz-tech'
                    sh 'kubectl describe pods -n xyz-tech -l app=xyz-tech-app'
                    sh 'kubectl logs -n xyz-tech -l xyz=xyz-tech-app --all-containers --tail=100'
                }
            }
        }
    }
    post {
        failure {
            echo '❌ Deployment failed.'
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
    }
}
